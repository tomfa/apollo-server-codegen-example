import Head from "next/head";
import { useState } from "react";

import styles from "../styles/Home.module.css";
import {
  useAddCustomerMutation,
  useGetCustomerByEmailQuery,
} from "../generated/hooks";

export default function Home() {
  const [email, setEmail] = useState("tomas@askeladden.co");
  const [name, setName] = useState("Tomas");
  const { error, loading, data, refetch } = useGetCustomerByEmailQuery({
    variables: { email },
  });
  const displayName = (loading && "...") || data?.getCustomerByEmail?.name;
  const [addCustomer] = useAddCustomerMutation();

  const createCustomer = async () => {
    await addCustomer({ variables: { name, email } });
    await refetch();
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to Code generation{(displayName && `, ${displayName}`) || ""}!
        </h1>
        <div className={styles.formInput}>
          <label className={styles.label} htmlFor="email">
            Email
          </label>
          <input
            id="email"
            onChange={(e) => setEmail(e.target.value.toLowerCase())}
            value={email}
          />
        </div>
        <div className={styles.formInput}>
          <label className={styles.label} htmlFor="name">
            Name
          </label>
          <input
            id="name"
            onChange={(e) => setName(e.target.value.toLowerCase())}
            value={name}
          />
        </div>
        <p className={styles.description}>
          This project is a demo of how easily you can get up and running with
          GraphQL and types using code generation.
        </p>
        <h3>This repo contains</h3>
        <ul>
          <li>Prisma as database ORM <em>(types are autogenerated from DB)</em></li>
          <li>An Apollo GraphQL server with graphiQL <em>(run with `yarn start`, then open localhost:4000)</em></li>
          <li>
            A NextJS webapp consuming the API <em>(hooks are autogenerated from API)</em>
          </li>
        </ul>
        <h3>To demo this, you have to:</h3>
        <ol>
          <li>Create a Postgres DB locally <em>(set DB_URL in <code>.env</code> file)</em> </li>
          <li>Write a DB schema <em>(Change or replace in <code>schema.prisma</code>)</em> </li>
          <li>Write a GraphQL schema <em>(Change or replace in <code>schema.graphql</code>)</em> </li>
        </ol>

        <div className={styles.grid}>
          {error && (
            <div className={styles["card-error"]}>
              <h2>GraphQL returned an error</h2>
              <p>{error.message}</p>
              <p>
                Have you started the server yet? Consider{" "}
                <a
                  className={styles["link"]}
                  href="https://chrome.google.com/webstore/detail/apollo-client-devtools/jdkknkkbebbapilgoeccciglkfbmbnfm"
                >
                  Apollo Client devtools
                </a>{" "}
                for debugging.
              </p>
            </div>
          )}
          {!error && !data?.getCustomerByEmail && (
            <div className={styles.card}>
              <h2>No data?</h2>
              <p>Unable to find user with email {email}</p>
              <p>
                Have you created a user in the database yet? You can add one by
                clicking this button{" "}
                <button
                  className={styles.createCustomer}
                  onClick={createCustomer}
                  disabled={!email}
                >
                  Create {email}
                </button>
              </p>
            </div>
          )}
          <div className={styles.card}>
            <h2>Generate db migrations and prisma types</h2>
            <p>
              The API uses{" "}
              <a
                className={styles.link}
                href={"https://www.prisma.io/docs/getting-started"}
              >
                Prisma
              </a>{" "}
              as a database ORM. Prisma inspects the postgres database and
              generates migrations and typescript types for the database.
            </p>
            <p>
              Try to update <code>schema.prisma</code>, then generate any
              migrations and update prisma types by running
              <code> yarn generate</code> in the root folder
            </p>
          </div>
          <div className={styles.card}>
            <h2>Generate GraphQL hooks</h2>
            <p>
              This repository uses{" "}
              <a
                href={"https://www.graphql-code-generator.com/"}
                className={styles.link}
              >
                Code Generator
              </a>{" "}
              to generate React hooks for Apollo Client.
            </p>
            <p>
              Generate the hooks by running
              <code> yarn generate</code> in the web folder.
            </p>
            <p>
              Try to update <code>schema.graphql</code> by removing the name
              field, then generate types again. Notice how Typescript will
              complain in this file automatically that name is not defined on
              the return values.
            </p>
          </div>
          <div className={styles.card}>
            <h2>Apollo Server</h2>
            <p>The API uses Apollo server for serving the GraphQL API</p>
            <p>
              See{" "}
              <a
                className={styles.link}
                href={
                  "https://www.apollographql.com/docs/apollo-server/getting-started/"
                }
              >
                Apollo Server - getting started
              </a>{" "}
              for more
            </p>
          </div>
          <div className={styles.card}>
            <h2>NextJS</h2>
            <p>This page uses NextJS as a frontend framework.</p>
            <p>
              See{" "}
              <a className={styles.link} href={"https://nextjs.org/docs"}>
                NextJS â€“ getting started
              </a>{" "}
              for more
            </p>
          </div>
          <div className={styles.card}>
            <h2>GraphQL Client</h2>
            <p>
              This page uses{" "}
              <a
                className={styles.link}
                href={"https://www.apollographql.com/docs/react/get-started/"}
              >
                Apollo Client
              </a>{" "}
              to interact with the GraphQL API.
            </p>
            <p>
              Even though the server is Apollo Server, you can use other GraphQL
              clients such as{" "}
              <a
                className={styles.link}
                href="https://react-query.tanstack.com/graphql"
              >
                React Query
              </a>
              ,{" "}
              <a
                className={styles.link}
                href="https://github.com/prisma-labs/graphql-request"
              >
                GraphQL request
              </a>
            </p>
            <p>
              There are{" "}
              <a
                href="https://www.graphql-code-generator.com/docs/plugins/typescript-react-apollo"
                className={styles.link}
              >
                code-generators for each of these and more.
              </a>
            </p>
          </div>
        </div>
        <div className={styles.card}>
          <h2>Instant API: Postgraphile</h2>
          <p>
            If setting up the API is too much hassle, there is also{" "}
            <a
              href="https://www.graphile.org/postgraphile/"
              className={styles.link}
            >
              Postgraphile
            </a>
            .
          </p>
          <p>Try it now, by stopping your server, then running</p>
          <code>npx postgraphile -c my_database_name --watch</code>
        </div>

        <div className={styles.card}>
          <h2>No-code: Hasura</h2>
          <p>
            Push your API to production without coding at all using{" "}
            <a href="https://hasura.io/" className={styles.link}>
              Hasura
            </a>
            .
          </p>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "} Vercel :heart: I like them.
        </a>
      </footer>
    </div>
  );
}
